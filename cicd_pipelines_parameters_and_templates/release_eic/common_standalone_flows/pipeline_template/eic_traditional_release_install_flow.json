{
  "appConfig": {},
  "application": "SPINNAKER_APPLICATION_NAME",
  "description": "This pipeline is maintained by spinnaker as a code, any changes made through the ui will be overwritten. Template name: eic_release_install_flow.json in repo https://gerrit-gamma.gic.ericsson.se/#/admin/projects/OSS/com.ericsson.oss.cicd/oss-common-cicd-pipeline-resources,branches",
  "disabled": false,
  "keepWaitingPipelines": false,
  "limitConcurrent": false,
  "locked": {
    "allowUnlockUi": true,
    "description": "This pipeline is maintained by spinnaker as a code, any changes made through the ui will be overwritten",
    "ui": true
  },
  "name": "SPINNAKER_PIPELINE_NAME",
  "notifications": [
    {
      "address": "NOTIFICATION_ADDRESS",
      "level": "pipeline",
      "type": "email",
      "when": [
        "pipeline.failed",
        "pipeline.complete"
      ]
    }
  ],
  "parameterConfig": [
    {
      "default": "",
      "description": "Name of the deployment",
      "hasOptions": false,
      "name": "ENV_NAME",
      "pinned": true,
      "required": true
    },
    {
      "default": "false",
      "description": "Option to use real CSAR. If false then dummy CSAR will be used",
      "hasOptions": false,
      "name": "USE_REAL_CSAR",
      "pinned": true,
      "required": false
    },
    {
      "default": "eric-eiae-helmfile",
      "description": "Name of the integration chart which will be used for the Initial install",
      "hasOptions": false,
      "name": "INT_CHART_NAME",
      "pinned": false,
      "required": true
    },
    {
      "default": "0.0.0",
      "description": "Version of the Integration Chart which will be used for the Initial Install",
      "hasOptions": false,
      "name": "INT_CHART_VERSION",
      "pinned": false,
      "required": true
    },
    {
      "default": "https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-drop-helm-local",
      "description": "Repo of the Integration Chart which will be used for the Initial Install",
      "hasOptions": false,
      "name": "INT_CHART_REPO",
      "pinned": false,
      "required": true
    },
    {
      "default": "armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-oss-deployment-manager",
      "description": "Deployment Manager Repository.",
      "hasOptions": false,
      "name": "DEPLOYMENT_MANAGER_REPO",
      "pinned": true,
      "required": true
    },
    {
      "default": "default",
      "description": "Deployment Manager version.",
      "hasOptions": false,
      "name": "DEPLOYMENT_MANAGER_VERSION",
      "pinned": true,
      "required": true
    },
    {
      "default": "true",
      "description": "When set to true uses the site values generated from the Deployment manager prepare command for the deployment.",
      "hasOptions": true,
      "name": "USE_DM_PREPARE",
      "options": [
        {
          "value": "false"
        }
      ],
      "pinned": true,
      "required": true
    },
    {
      "default": "site-values-latest.yaml",
      "description": "Site values datafile stored in OST.",
      "hasOptions": false,
      "name": "SITE_VALUES_FILE",
      "pinned": false,
      "required": true
    },
    {
      "default": "Release_Staging",
      "description": "RSR Tag is used to identify the environment by Report Center Registration Stage for Release stage",
      "hasOptions": false,
      "name": "RSR_TAG",
      "pinned": true,
      "required": true
    },
    {
      "default": "true",
      "description": "When set to true, enables the DDP auto upload",
      "hasOptions": true,
      "name": "DDP_AUTO_UPLOAD",
      "options": [
        {
          "value": "false"
        }
      ],
      "pinned": true,
      "required": true
    },
    {
      "default": "CLEANUP_TYPE_DEFAULT",
      "description": "The Type of cleanup that needs to be done. FULL will cleanup the deployment helm releases, crd helm releases, crd components, clusterroles, cluster rolebindings, namespaces (deployment and crd). Where as PARTIAL will only cleanup the deployment namespace. FULL cleanup option should NOT be used in such cases where single cluster is hosting multiple deployments.",
      "hasOptions": true,
      "name": "CLEANUP_TYPE",
      "options": [
        {
          "value": "FULL"
        },
        {
          "value": "PARTIAL"
        }
      ],
      "pinned": true,
      "required": true
    }
  ],
  "spelEvaluator": "v4",
  "stages": [
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "job": "RPT-RC_Update-Test-Environment-Status",
      "master": "oss-fem5s11-eiffel216",
      "name": "Reserve Environment",
      "parameters": {
        "ENV_NAME": "${parameters['ENV_NAME']}",
        "status": "Reserved"
      },
      "propertyFile": "",
      "refId": "Reserve Environment",
      "requisiteStageRefIds": [],
      "restrictExecutionDuringTimeWindow": false,
      "type": "jenkins"
    },
    {
      "continuePipeline": false,
      "failPipeline": true,
      "job": "RPT-RC_Update-PipelineStage",
      "master": "oss-fem5s11-eiffel216",
      "name": "Update Pipeline Stage with Spinnaker execution URL",
      "parameters": {
        "ENV_NAME": "${parameters['ENV_NAME']}",
        "FLOW_URL": "https://spinnaker.rnd.gic.ericsson.se/#/applications/eic-release-e2e-cicd/executions/details/${execution['id']}"
      },
      "refId": "Update Pipeline Stage with Spinnaker execution URL",
      "requisiteStageRefIds": [],
      "type": "jenkins",
      "waitForCompletion": false
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "job": "Staging-Report-Register",
      "master": "oss-fem4s11-eiffel216",
      "name": "Report Center Registration",
      "parameters": {
        "EXEC_ID": "${execution.id}"
      },
      "refId": "Report Center Registration",
      "requisiteStageRefIds": [],
      "type": "jenkins"
    },
    {
      "application": "SPINNAKER_APPLICATION_NAME",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "name": "Get Environment Details",
      "pipeline": "0d236ab2-bce0-4d4a-807d-0ccb638d4ce7",
      "pipelineParameters": {
        "ENVIRONMENT_NAME": "${parameters['ENV_NAME']}"
      },
      "refId": "Get Environment Details",
      "requisiteStageRefIds": [
        "Reserve Environment"
      ],
      "stageEnabled": {
        "expression": "#stage('Reserve Environment')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "pipeline",
      "waitForCompletion": true
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "job": "Get-Latest-ChartOrHelmfile",
      "master": "oss-aispinn-fem5s11-eiffel052",
      "name": "Get Latest Helmfile Version",
      "parameters": {
        "FUNCTIONAL_USER_SECRET": "reluser-user-creds",
        "INT_CHART_NAME": "${parameters['INT_CHART_NAME']}",
        "INT_CHART_REPO": "${parameters['INT_CHART_REPO']}",
        "INT_CHART_VERSION": "${parameters['INT_CHART_VERSION']}",
        "SLAVE_LABEL": "evo_docker_engine_gic_IDUN"
      },
      "propertyFile": "artifact.properties",
      "refId": "Get Latest Helmfile Version",
      "requisiteStageRefIds": [
        "Get Environment Details"
      ],
      "stageEnabled": {
        "expression": "#stage('Get Environment Details')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "job": "Purge-Release-in-Namespace",
      "master": "oss-aispinn-fem5s11-eiffel052",
      "name": "Purge",
      "parameters": {
        "ARMDOCKER_USER_SECRET": "reluser-creds-docker",
        "CLEANUP_TYPE": "${parameters['CLEANUP_TYPE']}",
        "ENV_FILES_BUCKET_NAME": "${parameters['ENV_NAME']}_files",
        "KUBECONFIG_FILE": "${#stage('Get Environment Details')['context']['KUBE_CONFIG']}",
        "NAMESPACE": "${#stage('Get Environment Details')['context']['NAMESPACE']}",
        "SLAVE_LABEL": "evo_docker_engine_gic_IDUN"
      },
      "refId": "Purge",
      "requisiteStageRefIds": [
        "Get Latest Helmfile Version"
      ],
      "stageEnabled": {
        "expression": "#stage('Get Latest Helmfile Version')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "application": "common-e2e-cicd",
      "failPipeline": true,
      "name": "Pre-Deploy",
      "pipeline": "88012023-7839-4eca-92f4-f87715ed77ad",
      "pipelineParameters": {
        "ARMDOCKER_USER_SECRET": "reluser-creds-docker",
        "CRD_NAMESPACE": "eric-crd-ns",
        "ENV_FILES_BUCKET_NAME": "${parameters['ENV_NAME']}_files",
        "EXECUTE_AM_PREDEPLOYMENT_STEP": "yes",
        "KUBECONFIG_FILE": "${#stage('Get Environment Details')['context']['KUBE_CONFIG']}",
        "NAMESPACE": "${#stage('Get Environment Details')['context']['NAMESPACE']}",
        "SFTP_CREDENTIALS": "idun-bur-sftp-credentials",
        "SLAVE_LABEL": "evo_docker_engine_gic_IDUN",
        "TESTWARE_API_URL": "http://api.prod-staging-report.ews.gic.ericsson.se/api",
        "TESTWARE_DATABASE_URL": "postgresql://testware_user:testware@kroto018.rnd.gic.ericsson.se:30005/staging",
        "TESTWARE_K6_TOOL_GUI_URL": "http://gui.prod-staging-report.ews.gic.ericsson.se/staging-reports"
      },
      "refId": "Pre-Deploy",
      "requisiteStageRefIds": [
        "Purge"
      ],
      "stageEnabled": {
        "expression": "#stage('Purge')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "pipeline",
      "waitForCompletion": true
    },
    {
      "comments": "",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "job": "OSS-Integration-Helmfile-Deploy-Using-dit",
      "master": "oss-aispinn-fem5s11-eiffel052",
      "name": "Install",
      "parameters": {
        "ARMDOCKER_USER_SECRET": "reluser-creds-docker",
        "DDP_AUTO_UPLOAD": "${parameters['DDP_AUTO_UPLOAD']}",
        "DEPLOYMENT_MANAGER_DOCKER_IMAGE": "${parameters['DEPLOYMENT_MANAGER_REPO']}:${parameters['DEPLOYMENT_MANAGER_VERSION']}",
        "DEPLOYMENT_NAME": "${parameters['ENV_NAME']}",
        "DEPLOYMENT_TYPE": "install",
        "DOWNLOAD_CSARS": "${parameters['USE_REAL_CSAR']}",
        "FUNCTIONAL_USER_SECRET": "reluser-user-creds",
        "HELM_TIMEOUT": "3600",
        "TIMEOUT": "10800",
        "INT_CHART_NAME": "${parameters['INT_CHART_NAME']}",
        "INT_CHART_REPO": "${parameters['INT_CHART_REPO']}",
        "INT_CHART_VERSION": "${#stage('Get Latest Helmfile Version')['context']['INT_CHART_VERSION']}",
        "SITE_VALUES_FILE_NAME": "${parameters['SITE_VALUES_FILE']}",
        "SITE_VALUES_OVERRIDE_FILE_NAME": "${(#stage('Get Environment Details')['context']['TO_STATE_SITE_VALUES_OVERRIDE_FILE']== None)? 'NONE': #stage('Get Environment Details')['context']['TO_STATE_SITE_VALUES_OVERRIDE_FILE']}",
        "SLAVE_LABEL": "evo_docker_engine_gic_IDUN",
        "TAGS": "${#stage('Get Environment Details')['context']['TAGS']}",
        "USE_CERTM": "true",
        "USE_DM_PREPARE": "${parameters['USE_DM_PREPARE']}"
      },
      "refId": "Install",
      "requisiteStageRefIds": [
        "Pre-Deploy"
      ],
      "stageEnabled": {
        "expression": "#stage('Pre-Deploy')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "continuePipeline": true,
      "failPipeline": false,
      "job": "OSS-Integration-HealthCheck-Using-DM",
      "master": "oss-aispinn-fem5s11-eiffel052",
      "name": "Post Install Health Check",
      "parameters": {
        "ARMDOCKER_USER_SECRET": "reluser-creds-docker",
        "ENV_FILES_BUCKET_NAME": "${parameters['ENV_NAME']}_files",
        "FUNCTIONAL_USER_SECRET": "reluser-user-creds",
        "KUBECONFIG_FILE": "${#stage('Get Environment Details')['context']['KUBE_CONFIG']}",
        "NAMESPACE": "${#stage('Get Environment Details')['context']['NAMESPACE']}",
        "SLAVE_LABEL": "evo_docker_engine_gic_IDUN"
      },
      "refId": "Post Install Health Check",
      "requisiteStageRefIds": [
        "Install"
      ],
      "stageEnabled": {
        "expression": "#stage('Install')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "application": "banba",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "name": "Run k6 Tests & Assert",
      "pipeline": "e908f29c-e1ac-4df5-a8e3-0cae7a426efe",
      "refId": "Run k6 Tests & Assert",
      "requisiteStageRefIds": [
        "Post Install Health Check"
      ],
      "pipelineParameters": {
        "JENKINS_AGENT_LABEL": "fem5dockerslave5",
        "DEPLOYMENT_NAME": "${parameters['ENV_NAME']}",
        "EIC_VERSION": "${#stage('Get Environment Details')['context']['VERSION']}",
        "NAMESPACE": "${#stage('Get Environment Details')['context']['NAMESPACE']}",
        "IAM_HOSTNAME": "${#stage('Get Environment Details')['context']['IAM_HOST_REPLACE']}",
        "GAS_HOSTNAME": "${#stage('Get Environment Details')['context']['GAS_HOST_REPLACE']}",
        "ADC_HOSTNAME": "${#stage('Get Environment Details')['context']['ADC_HOST_REPLACE']}",
        "APP_MGR_HOSTNAME": "${#stage('Get Environment Details')['context']['APPMGR_HOST_REPLACE']}",
        "TH_HOSTNAME": "${#stage('Get Environment Details')['context']['TH_HOST_REPLACE']}",
        "KAFKA_HOSTNAME": "${#stage('Get Environment Details')['context']['KAFKA_BOOTSTRAP_HOST_REPLACE']}",
        "CONFIG_FILES": "${#stage('Get Environment Details')['context']['CONFIG_FILES']}",
        "ECM_HOSTNAME": "${#stage('Get Environment Details')['context']['ECM_HOST_REPLACE']}",
        "BDR_HOSTNAME": "${#stage('Get Environment Details')['context']['BDR_HOST_REPLACE']}",
        "EIC_HOSTNAME": "${#stage('Get Environment Details')['context']['EIC_HOST_REPLACE']}",
        "ENM_HOSTNAME": "${#stage('Get Environment Details')['context']['ENM_HOST_REPLACE']}",
        "KUBE_CONFIG": "${#stage('Get Environment Details')['context']['KUBE_CONFIG_FILE_CREDENTIAL_ID']}"
      },
      "stageEnabled": {
        "expression": "#stage('Install')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "pipeline",
      "waitForCompletion": true
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "name": "Post Flow Checks",
      "preconditions": [
        {
          "context": {
            "expression": "#stage('Reserve Environment')['status'] == 'SUCCEEDED' or #stage('Reserve Environment')['status'] == 'SKIPPED'",
            "failureMessage": "Failed to Reserve Environment"
          },
          "failPipeline": true,
          "type": "expression"
        },
        {
          "context": {
            "expression": "#stage('Get Environment Details')['status'] == 'SUCCEEDED' or #stage('Get Environment Details')['status'] == 'SKIPPED'",
            "failureMessage": "Failed to Get Environment Details"
          },
          "failPipeline": true,
          "type": "expression"
        },
        {
          "context": {
            "expression": "#stage('Purge')['status'] == 'SUCCEEDED' or #stage('Purge')['status'] == 'SKIPPED'",
            "failureMessage": "Purge failed"
          },
          "failPipeline": true,
          "type": "expression"
        },
        {
          "context": {
            "expression": "#stage('Install')['status'] == 'SUCCEEDED' or #stage('Install')['status'] == 'SKIPPED'",
            "failureMessage": "Install failed"
          },
          "failPipeline": true,
          "type": "expression"
        },
        {
          "context": {
            "expression": "#stage('Post Install Health Check')['status'] == 'SUCCEEDED' or #stage('Post Install Health Check')['status'] == 'SKIPPED'",
            "failureMessage": "Post Install Health Check failed"
          },
          "failPipeline": true,
          "type": "expression"
        },
        {
          "context": {
            "expression": "#stage('Run k6 Tests & Assert')['status'] == 'SUCCEEDED' or #stage('Run k6 Tests & Assert')['status'] == 'SKIPPED'",
            "failureMessage": "Run k6 Tests & Assert failed"
          },
          "failPipeline": true,
          "type": "expression"
        }
      ],
      "refId": "Post Flow Checks",
      "requisiteStageRefIds": [
        "Run k6 Tests & Assert"
      ],
      "type": "checkPreconditions"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "job": "RPT-RC_Quarantine-Environment",
      "markUnstableAsSuccessful": true,
      "master": "oss-fem5s11-eiffel216",
      "name": "Quarantine Environment",
      "parameters": {
        "ENV_NAME": "${parameters['ENV_NAME']}"
      },
      "refId": "Quarantine Environment",
      "requisiteStageRefIds": [
        "Post Flow Checks"
      ],
      "stageEnabled": {
        "expression": "#stage('Post Flow Checks')['status'] != 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "completeOtherBranchesThenFail": true,
      "continuePipeline": false,
      "failPipeline": false,
      "job": "RPT-RC_Unreserve-Environment",
      "master": "oss-fem5s11-eiffel216",
      "name": "Unreserve Environment",
      "parameters": {
        "ENV_NAME": "${parameters['ENV_NAME']}"
      },
      "refId": "Unreserve Environment",
      "requisiteStageRefIds": [
        "Post Flow Checks"
      ],
      "stageEnabled": {
        "expression": "#stage('Post Flow Checks')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "application": "SPINNAKER_APPLICATION_NAME",
      "completeOtherBranchesThenFail": true,
      "continuePipeline": false,
      "failPipeline": false,
      "name": "Update II Baseline",
      "pipeline": "cc89af18-2f3c-4a6b-b27e-c37856c2a08a",
      "pipelineParameters": {
        "BASELINE_VERSION_KEY": "II_BASELINE_INT_CHART_VERSION",
        "ENVIRONMENT_NAME": "${parameters['ENV_NAME']}",
        "VERSION_FOR_COMPARISON": "${#stage('Get Latest Helmfile Version')['context']['INT_CHART_VERSION']}"
      },
      "refId": "Update II Baseline",
      "requisiteStageRefIds": [
        "Post Install Health Check"
      ],
      "stageEnabled": {
        "expression": "UPDATE_II_BASELINE AND #stage('Post Install Health Check')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "pipeline",
      "waitForCompletion": true
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "job": "CICD-UTILS-DDP-Upload",
      "master": "oss-aispinn-fem5s11-eiffel052",
      "name": "Push Data to DDP",
      "parameters": {
        "DDC_POD_NAME": "eric-oss-ddc",
        "ENV_FILES_BUCKET_NAME": "${parameters['ENV_NAME']}_files",
        "FUNCTIONAL_USER_SECRET": "reluser-user-creds",
        "KUBE_CONFIG": "${parameters['KUBECONFIG_FILE']}",
        "NAMESPACE": "${parameters['NAMESPACE']}",
        "SLAVE": "evo_docker_engine_gic_IDUN",
        "SPINNAKER_PIPELINE_ID": "${execution['id']}"
      },
      "refId": "Push Data to DDP",
      "requisiteStageRefIds": [
        "Post Flow Checks"
      ],
      "stageEnabled": {
        "expression": "#stage('Post Flow Checks')['status'] != 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "jenkins"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "name": "End Flow",
      "preconditions": [
        {
          "context": {
            "stageName": "Post Flow Checks",
            "stageStatus": "SUCCEEDED"
          },
          "failPipeline": true,
          "type": "stageStatus"
        }
      ],
      "refId": "End Flow",
      "requisiteStageRefIds": [
        "Quarantine Environment",
        "Unreserve Environment",
        "Update II Baseline",
        "Push Data to DDP"
      ],
      "type": "checkPreconditions"
    }
  ],
  "triggers": []
}
